{
    "docs": [
        {
            "location": "/", 
            "text": "HDX SDK for HTML5\n\n\nIntroduction\n\n\nCitrix Receiver for HTML5 enhances support for HDX and SDK sessions by enabling you to customize your delivery model for Citrix hosted apps and desktops through your website. This feature is particularly useful for building a rich app experience in your Enterprise portals. It can be used to provide a rich app experience for users as a service when hosting Citrix Receiver for HTML5 on your web server while launching Citrix hosted apps and desktops from your website.\n\n\nGetting Started\n\n\n\n\nCopy \nCitrixHTML5SDK.js\n, \nHDXLauncher.js\n, \nHDXEngine.html\n files to the\n    same folder as the parent HTML page.\n\n\nInclude \nCitrixHTML5SDK.js\n in parent HTML page.\n\n\nSet the full path of HTML5 Client.\n\n\nSet the connection parameters for launching the session.\n\n\nAttach the events if required.\n\n\nStart the session by passing ICA. You can refer to \nStoreFront Web APIs\n to fetch ICA.\n\n\n\n\nClick \nhere\n to access the full API documentation.", 
            "title": "HDX SDK for HTML5"
        }, 
        {
            "location": "/#hdx-sdk-for-html5", 
            "text": "", 
            "title": "HDX SDK for HTML5"
        }, 
        {
            "location": "/#introduction", 
            "text": "Citrix Receiver for HTML5 enhances support for HDX and SDK sessions by enabling you to customize your delivery model for Citrix hosted apps and desktops through your website. This feature is particularly useful for building a rich app experience in your Enterprise portals. It can be used to provide a rich app experience for users as a service when hosting Citrix Receiver for HTML5 on your web server while launching Citrix hosted apps and desktops from your website.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Copy  CitrixHTML5SDK.js ,  HDXLauncher.js ,  HDXEngine.html  files to the\n    same folder as the parent HTML page.  Include  CitrixHTML5SDK.js  in parent HTML page.  Set the full path of HTML5 Client.  Set the connection parameters for launching the session.  Attach the events if required.  Start the session by passing ICA. You can refer to  StoreFront Web APIs  to fetch ICA.   Click  here  to access the full API documentation.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/capabilities/", 
            "text": "Session Launch\n\n\nCurrently Receiver for Web launches the HTML5 HDX session in a new tab. This API allows HTML5 HDX session to be embedded within a website or to be opened in a new tab.\n\n\nHTML5 Receiver Events\n\n\nHTML5 HDX session provides a set of events for the website to give better control on the session with respect to various connection states, errors and URL redirection. The user experience with the HDX session can be customized using the events.\n\n\nUI Customizations\n\n\nIt is possible to leverage the embedding of the session along with the receiver events to achieve some of the UI customizations mentioned below to build preferred experience:\n\n\n\n\n\n\nSession connection experience\n\n\n\n\n\n\nCustom connection experience could be built using the various connection events.\n\n\n\n\n\n\n\n\n\n\nError dialog customization\n\n\n\n\n\n\nSuppress error dialog shown by Receiver for HTML5 and show the custom error dialog: When the session is embedded within the website, custom error UI that aligns with the website could be shown using the error events and suppressing the error dialog shown by HTML5 receiver using the configuration options.\n\n\nError dialog shown by HTML5 receiver with custom error message: Error messages in the locales folder can be edited which will be picked by error dialog shown by HTML5 receiver.\n\n\nURL Redirection dialog customization URL redirection can be customized by the website using the urlredirection events and suppressing the URL redirection dialog shown by HTML5 receiver using the configuration options.\n\n\nSession close UI customization Action on disconnecting the session can be customized using the API params, so that session can be closed with/without prompting user. Also web site can be configured to redirect to a specified URL after session close\n\n\n\n\n\n\n\n\n\n\nSession Operations\n\n\n\n\n\n\nChange active session resolution API allows the session resolution to be changed dynamically\n\n\nSend key combinations to session More useful special key combinations can be sent to the active session. For 1example, Ctrl+Alt+Del, F5 , Home, end etc\u2026\n\n\nAdd/remove custom toolbar buttons Custom toolbar buttons can be added/removed as primary/secondary menu items to an active session\n\n\n\n\n\n\nSession disconnect\n\n\nWebsite could disconnect to the session using this API. This is more helpful when the in-session toolbar is hidden.", 
            "title": "SDK Capabilities"
        }, 
        {
            "location": "/capabilities/#session-launch", 
            "text": "Currently Receiver for Web launches the HTML5 HDX session in a new tab. This API allows HTML5 HDX session to be embedded within a website or to be opened in a new tab.", 
            "title": "Session Launch"
        }, 
        {
            "location": "/capabilities/#html5-receiver-events", 
            "text": "HTML5 HDX session provides a set of events for the website to give better control on the session with respect to various connection states, errors and URL redirection. The user experience with the HDX session can be customized using the events.", 
            "title": "HTML5 Receiver Events"
        }, 
        {
            "location": "/capabilities/#ui-customizations", 
            "text": "It is possible to leverage the embedding of the session along with the receiver events to achieve some of the UI customizations mentioned below to build preferred experience:    Session connection experience    Custom connection experience could be built using the various connection events.      Error dialog customization    Suppress error dialog shown by Receiver for HTML5 and show the custom error dialog: When the session is embedded within the website, custom error UI that aligns with the website could be shown using the error events and suppressing the error dialog shown by HTML5 receiver using the configuration options.  Error dialog shown by HTML5 receiver with custom error message: Error messages in the locales folder can be edited which will be picked by error dialog shown by HTML5 receiver.  URL Redirection dialog customization URL redirection can be customized by the website using the urlredirection events and suppressing the URL redirection dialog shown by HTML5 receiver using the configuration options.  Session close UI customization Action on disconnecting the session can be customized using the API params, so that session can be closed with/without prompting user. Also web site can be configured to redirect to a specified URL after session close", 
            "title": "UI Customizations"
        }, 
        {
            "location": "/capabilities/#session-operations", 
            "text": "Change active session resolution API allows the session resolution to be changed dynamically  Send key combinations to session More useful special key combinations can be sent to the active session. For 1example, Ctrl+Alt+Del, F5 , Home, end etc\u2026  Add/remove custom toolbar buttons Custom toolbar buttons can be added/removed as primary/secondary menu items to an active session", 
            "title": "Session Operations"
        }, 
        {
            "location": "/capabilities/#session-disconnect", 
            "text": "Website could disconnect to the session using this API. This is more helpful when the in-session toolbar is hidden.", 
            "title": "Session disconnect"
        }, 
        {
            "location": "/ReceiverError/", 
            "text": "Class: ReceiverError\n\n\nReceiverError\n\n\nnew ReceiverError()\n\n\nMembers\n\n\n(static) \n this.description\n\n\nProperties:\n\n\nName\nType\nDescription\ndescription\nString\nDescription of the error.\n\n\n(static) \n this.type\n\n\nProperties:\n\n\nName\nType\nDescription\ntype\nString\nType of the error.", 
            "title": "ReceiverError"
        }, 
        {
            "location": "/ReceiverError/#class-receivererror", 
            "text": "", 
            "title": "Class: ReceiverError"
        }, 
        {
            "location": "/ReceiverError/#receivererror", 
            "text": "new ReceiverError()", 
            "title": "ReceiverError"
        }, 
        {
            "location": "/ReceiverError/#members", 
            "text": "(static)   this.description", 
            "title": "Members"
        }, 
        {
            "location": "/ReceiverError/#properties", 
            "text": "Name Type Description description String Description of the error.  (static)   this.type", 
            "title": "Properties:"
        }, 
        {
            "location": "/ReceiverError/#properties_1", 
            "text": "Name Type Description type String Type of the error.", 
            "title": "Properties:"
        }, 
        {
            "location": "/session/", 
            "text": "Class: Session\n\n\nSession\n\n\nnew Session\n()\n\n\nMembers\n\n\ncontainer\n\n\nContains the type and value of the container where the session is launched.\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \ncontainer\n \nObject\n \n \nProperties\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \ntype\n \nString\n \nType of the container. Will be set to \"iframe\" or \"window\" when launchType is set to \"embed\" or \"newtab\" respectively.\n \nvalue\n \nObject\n \nContains the iframe DOM object or reference to the window where the session is launched based on the launchType.\n \n\n\n\n\n\n(readonly) \nid\n\n\nProperties: {#properties-2 .subsection-title}\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nid\n \nString\n \nID of the object.\n\n\n\nMethods\n\n\n(inner) \naddListener\n(eventType, eventListener)\n\n\nRegisters the eventListener on the eventType.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \neventType\n \nString\n \nType of the event for which the listener needs to be attached.\nSupported event types : \nonConnection\nonConnectionClosed\nonURLRedirection\nonError\n \neventListener\n \neventListener\n \nListener to handle the event.\n\n\n\nExample\n\n\n// Adding onConnection event handler\n\n\nfunction\n \nconnectionHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n\n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n        \n\n}\n               \n\nsessionObject\n.\naddListener\n(\nonConnection\n,\nconnectionHandler\n);\n\n\n\n// Adding onConnectionClosed event handler\n\n\nfunction\n \nconnectionClosedHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n        \n\n}\n\n\nsessionObject\n.\naddListener\n(\nonConnectionClosed\n,\nconnectionClosedHandler\n);\n\n\n\n// Adding onError event handler\n\n\nfunction\n \nonErrorHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n\n}\n\n\nsessionObject\n.\naddListener\n(\nonError\n,\nonErrorHandler\n);\n\n\n\n//Adding onURLRedirection event handler\n\n\nfunction\n \nonURLRedirectionHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n\n}\n\n\nsessionObject\n.\naddListener\n(\nonURLRedirection\n,\nonURLRedirectionHandler\n);\n\n\n\n\n\n\n(inner) \nchangeResolution\n(bounds)\n\n\nChanges the resolution of the session.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nbounds\n \nObject\n \nContain session resolution settings.\n\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nbounds.autoresize\n \nboolean\n \nShould be set to false to give fixed width and height to session. If this value is set to true then the session is resized to match the size of iframe element or the tab.\n \nbounds.width\n \nNumber\n \nWidth of the session specified in pixels. This value will be set only when autoresize is set to false.\n \nbounds.height\n \nNumber\n \nHeight of the session specified in pixels. This value will be set only when autoresize is set to false.\n\n\n\nExamples\n\n\nExample\n \n1\n \n:\n \nTo\n \nchange\n \nresolution\n \nto\n \nfixed\n \nwidth\n \nand\n \nheight\n  \n\nvar\n \nbounds\n \n=\n \n{\n\n    \nautoresize\n:\nfalse\n,\n\n    \nwidth\n:\n \n800\n,\n\n    \nheight\n:\n600\n\n\n}\n\n\nsessionObject\n.\nchangeResolution\n(\nbounds\n);\n\n\n\n\n\n\nExample\n \n2\n \n:\n \nTo\n \nchange\n \nthe\n \nsession\n \nresolution\n \nto\n \nmatch\n \nthe\n \niframe\n \nelement\n \nor\n \ntab\n \nsize\n   \n\nvar\n \nbounds\n \n=\n \n{\n\n    \nautoresize\n:\n \ntrue\n\n\n}\n\n\nsessionObject\n.\nchangeResolution\n(\nbounds\n);\n\n\n\n\n\n\n(inner) \ndisconnect\n()\n\n\nDisconnects the session.\n\n\n(inner) \nremoveListener\n(eventType, eventListener)\n\n\nRemoves the eventListener on the eventType.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \neventType\n \nString\n \nType of the event for which the listener needs to be removed.\nSupported event types : \nonConnection\nonConnectionClosed\nonURLRedirection\nonError\n \neventListener\n \neventListener\n \nListener to handle the event.\n\n\n\nExample\n\n\n//Removing the event handler for onConnection event\n\n\nfunction\n \nconnectionHandler\n(\neventObj\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n\n}\n\n\nsessionObject\n.\nremoveListener\n(\nonConnection\n,\nconnectionHandler\n);\n\n\n\n\n\n\n(inner) \nsendSpecialKeys\n(keys)\n {#~sendSpecialKeys .name}\n\n\nSends a key combination to the session. In this version only\n\"ctrl+alt+del\" is supported.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nkeys\n \nString\n \nKey combination string.\n\n\n\nExample\n\n\nvar keys = \nctrl+alt+del\n; //Only this key combination is supported in this version.\nsessionObject.sendSpecialKeys(keys);\n\n\n\n\n\n(inner) \nstart\n(launchData)\n\n\nStarts the session.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nlaunchData\n \nObject\n \nContains the type and value of ICA.\n\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nlaunchData.type\n \nString\n \nSpecifies the data type of ICA data. Allowed values are \"json\" or \"ini\".\n \nlaunchData.value\n \nString\n \nICA data to start the session. It should be a JSON object when type is \"json\" or a string read from a .ini file when type is \"ini\".\n\n\n\nExamples\n\n\nExample\n \n1\n \n:\n \nWhen\n \nICA\n \ndata\n \nis\n \nin\n \nJSON\n \nformat\n                                \n\nvar\n \nicaObj\n \n=\n \n{\n\n    \nClientName\n:\nHTML5-Receiver\n,\n\n    \nDomain\n:\ndomain_name\n,\n\n    \nClearPassword\n:\npassword\n,\n\n    \nInitialProgram\n:\ninitial program\n,\n\n    \nTitle\n:\ntitle\n,\n\n    \nAddress\n:\nip address\n,\n\n    \nUsername\n:\nuser name\n,\n\n    \nwsPort\n:\nport val\n\n\n}\n\n\nvar\n \nlaunchData\n \n=\n \n{\ntype\n \n:\n \njson\n,\nvalue\n \n:\n \nicaObj\n};\n\n\nsessionObject\n.\nstart\n(\nlaunchData\n);\n\n\n\n\n\n\n\n\nExample\n \n2\n \n:\n \nWhen\n \nICA\n \ndata\n \nis\n \nin\n \nINI\n \nformat\n\n\nvar\n \nlaunchData\n \n=\n \n{\ntype\n \n:\nini\n,\nvalue\n \n:\nica data in ini format\n};\n\n\nsessionObject\n.\nstart\n(\nlaunchData\n);\n\n\n\n\n\n\nEvents\n\n\nonConnection\n\n\nTo receive various states during the connection from client to server.\n\n\nType:\n\n\n\n\n\n\nobject\n\n\n\n\n\n\nProperties: {#properties-5 .subsection-title}\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nstate\n \nString\n \nDifferent connection states below : \n\"connecting\" : Raised when connection starts before displaying connection dialog. \n\"connected\" : Raised when connection is complete and when server and client starts exchanging data. \n\"sessionReady\" : Raised when session is fully initialized, launched and ready for user interaction. \n\n\n\nExample\n\n\nSample\n \nevent\n \nobject\n \ngenerated\n \nfor\n \nonConnection\n \nevent\n.\n    \n\n\n{\n   \n    \nid\n:\nsession id\n,\n\n    \ntype\n \n:\n \nonConnection\n,\n\n    \ndata\n:{\n\n        \nstate\n \n:\n \nconnecting\n \n// Event is triggered 3 times with different states mentioned above.\n\n    \n}\n\n\n}\n\n\n\n\n\n\nonConnectionClosed\n\n\nRaised when the connection with the server is closed.\n\n\nExample\n\n\nSample\n \nevent\n \nobject\n \ngenerated\n \nfor\n \nonConnectionClosed\n \nevent.\n              \n\n\n{\n   \n    \nid\n:\nsession id\n,\n\n    \ntype\n \n:\n \nonConnectionClosed\n,\n\n\n}\n\n\n\n\n\n\nonError\n\n\nRaised on occurrence of any error in Citrix Receiver.\n\n\nType:\n\n\n\n\n\n\nobject\n\n\n\n\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nid\n \nString\n \nString ID defined in \nlocale_file\n.js. For example, en.js would be for English, ko.js for Korean etc., ID remains the same for all locales supported.\n \nmessage\n \nString\n \nLocalized error message for the key. Customer can provide custom string in the language file to get meaningful error in the context of the deployment.\n\n\n\nExample\n\n\nSample\n \nevent\n \nobject\n \ngenerated\n \nfor\n \nonError\n \nevent.\n             \n\n\n{\n   \n    \nid\n:\nsession id\n,\n\n    \ntype\n \n:\n \nonError\n,\n\n    \ndata\n:{\n\n            \nid\n:\nkey_in_locale_file\n \n            \nmessage\n \n:\n \nvalue_for_the_key_in_locale_file\n\n        \n}\n\n\n}\n                           \n\n\n\n\n\nonURLRedirection {#~event:onURLRedirection .name}\n\n\nRaised when URL redirection is configured on server and when any URL is passed to the HTML5 engine to process. The message would contain the URL that is redirected to the client.\n\n\nType:\n\n\n\n\n\n\nobject\n\n\n\n\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nurl\n \nString\n \nThe value of the url would contain the URL that is redirected to the client.\n\n\n\nExample\n\n\nSample\n \nevent\n \nobject\n \ngenerated\n \nfor\n \nonURLRedirection\n \nevent.\n        \n\n\n{\n   \n    \nid\n:\nsession id\n,\n\n    \ntype\n \n:\n \nonURLRedirection\n,\n\n    \ndata\n:{\n\n        \nurl\n \n:\n \nurl_received_to_redirect\n\n    \n}\n\n\n}", 
            "title": "Session"
        }, 
        {
            "location": "/session/#class-session", 
            "text": "", 
            "title": "Class: Session"
        }, 
        {
            "location": "/session/#session", 
            "text": "", 
            "title": "Session"
        }, 
        {
            "location": "/session/#new-session", 
            "text": "", 
            "title": "new Session()"
        }, 
        {
            "location": "/session/#members", 
            "text": "", 
            "title": "Members"
        }, 
        {
            "location": "/session/#container", 
            "text": "Contains the type and value of the container where the session is launched.", 
            "title": "container"
        }, 
        {
            "location": "/session/#properties", 
            "text": "Name   Type   Description         container   Object", 
            "title": "Properties:"
        }, 
        {
            "location": "/session/#readonly-id", 
            "text": "", 
            "title": "(readonly) id"
        }, 
        {
            "location": "/session/#properties-properties-2-subsection-title", 
            "text": "Name   Type   Description         id   String   ID of the object.", 
            "title": "Properties: {#properties-2 .subsection-title}"
        }, 
        {
            "location": "/session/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/session/#inner-addlistenereventtype-eventlistener", 
            "text": "Registers the eventListener on the eventType.", 
            "title": "(inner) addListener(eventType, eventListener)"
        }, 
        {
            "location": "/session/#parameters", 
            "text": "Name   Type   Description         eventType   String   Type of the event for which the listener needs to be attached. Supported event types :  onConnection onConnectionClosed onURLRedirection onError   eventListener   eventListener   Listener to handle the event.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/session/#example", 
            "text": "// Adding onConnection event handler  function   connectionHandler ( event ){ \n     console . log ( Event Received :    +   event . type ); \n     console . log ( event . data );          }                 sessionObject . addListener ( onConnection , connectionHandler );  // Adding onConnectionClosed event handler  function   connectionClosedHandler ( event ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );          }  sessionObject . addListener ( onConnectionClosed , connectionClosedHandler );  // Adding onError event handler  function   onErrorHandler ( event ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );  }  sessionObject . addListener ( onError , onErrorHandler );  //Adding onURLRedirection event handler  function   onURLRedirectionHandler ( event ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );  }  sessionObject . addListener ( onURLRedirection , onURLRedirectionHandler );", 
            "title": "Example"
        }, 
        {
            "location": "/session/#inner-changeresolutionbounds", 
            "text": "Changes the resolution of the session.", 
            "title": "(inner) changeResolution(bounds)"
        }, 
        {
            "location": "/session/#parameters_1", 
            "text": "Name   Type   Description         bounds   Object   Contain session resolution settings.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/session/#properties_1", 
            "text": "Name   Type   Description         bounds.autoresize   boolean   Should be set to false to give fixed width and height to session. If this value is set to true then the session is resized to match the size of iframe element or the tab.   bounds.width   Number   Width of the session specified in pixels. This value will be set only when autoresize is set to false.   bounds.height   Number   Height of the session specified in pixels. This value will be set only when autoresize is set to false.", 
            "title": "Properties:"
        }, 
        {
            "location": "/session/#examples", 
            "text": "Example   1   :   To   change   resolution   to   fixed   width   and   height    var   bounds   =   { \n     autoresize : false , \n     width :   800 , \n     height : 600  }  sessionObject . changeResolution ( bounds );   Example   2   :   To   change   the   session   resolution   to   match   the   iframe   element   or   tab   size     var   bounds   =   { \n     autoresize :   true  }  sessionObject . changeResolution ( bounds );", 
            "title": "Examples"
        }, 
        {
            "location": "/session/#inner-disconnect", 
            "text": "Disconnects the session.", 
            "title": "(inner) disconnect()"
        }, 
        {
            "location": "/session/#inner-removelistenereventtype-eventlistener", 
            "text": "Removes the eventListener on the eventType.", 
            "title": "(inner) removeListener(eventType, eventListener)"
        }, 
        {
            "location": "/session/#parameters_2", 
            "text": "Name   Type   Description         eventType   String   Type of the event for which the listener needs to be removed. Supported event types :  onConnection onConnectionClosed onURLRedirection onError   eventListener   eventListener   Listener to handle the event.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/session/#example_1", 
            "text": "//Removing the event handler for onConnection event  function   connectionHandler ( eventObj ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );  }  sessionObject . removeListener ( onConnection , connectionHandler );", 
            "title": "Example"
        }, 
        {
            "location": "/session/#inner-sendspecialkeyskeys-sendspecialkeys-name", 
            "text": "Sends a key combination to the session. In this version only\n\"ctrl+alt+del\" is supported.", 
            "title": "(inner) sendSpecialKeys(keys) {#~sendSpecialKeys .name}"
        }, 
        {
            "location": "/session/#parameters_3", 
            "text": "Name   Type   Description         keys   String   Key combination string.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/session/#example_2", 
            "text": "var keys =  ctrl+alt+del ; //Only this key combination is supported in this version.\nsessionObject.sendSpecialKeys(keys);", 
            "title": "Example"
        }, 
        {
            "location": "/session/#inner-startlaunchdata", 
            "text": "Starts the session.", 
            "title": "(inner) start(launchData)"
        }, 
        {
            "location": "/session/#parameters_4", 
            "text": "Name   Type   Description         launchData   Object   Contains the type and value of ICA.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/session/#properties_2", 
            "text": "Name   Type   Description         launchData.type   String   Specifies the data type of ICA data. Allowed values are \"json\" or \"ini\".   launchData.value   String   ICA data to start the session. It should be a JSON object when type is \"json\" or a string read from a .ini file when type is \"ini\".", 
            "title": "Properties:"
        }, 
        {
            "location": "/session/#examples_1", 
            "text": "Example   1   :   When   ICA   data   is   in   JSON   format                                  var   icaObj   =   { \n     ClientName : HTML5-Receiver , \n     Domain : domain_name , \n     ClearPassword : password , \n     InitialProgram : initial program , \n     Title : title , \n     Address : ip address , \n     Username : user name , \n     wsPort : port val  }  var   launchData   =   { type   :   json , value   :   icaObj };  sessionObject . start ( launchData );    Example   2   :   When   ICA   data   is   in   INI   format  var   launchData   =   { type   : ini , value   : ica data in ini format };  sessionObject . start ( launchData );", 
            "title": "Examples"
        }, 
        {
            "location": "/session/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/session/#onconnection", 
            "text": "To receive various states during the connection from client to server.", 
            "title": "onConnection"
        }, 
        {
            "location": "/session/#type", 
            "text": "object", 
            "title": "Type:"
        }, 
        {
            "location": "/session/#properties-properties-5-subsection-title", 
            "text": "Name   Type   Description         state   String   Different connection states below :  \"connecting\" : Raised when connection starts before displaying connection dialog.  \"connected\" : Raised when connection is complete and when server and client starts exchanging data.  \"sessionReady\" : Raised when session is fully initialized, launched and ready for user interaction.", 
            "title": "Properties: {#properties-5 .subsection-title}"
        }, 
        {
            "location": "/session/#example_3", 
            "text": "Sample   event   object   generated   for   onConnection   event .      {    \n     id : session id , \n     type   :   onConnection , \n     data :{ \n         state   :   connecting   // Event is triggered 3 times with different states mentioned above. \n     }  }", 
            "title": "Example"
        }, 
        {
            "location": "/session/#onconnectionclosed", 
            "text": "Raised when the connection with the server is closed.", 
            "title": "onConnectionClosed"
        }, 
        {
            "location": "/session/#example_4", 
            "text": "Sample   event   object   generated   for   onConnectionClosed   event.                {    \n     id : session id , \n     type   :   onConnectionClosed ,  }", 
            "title": "Example"
        }, 
        {
            "location": "/session/#onerror", 
            "text": "Raised on occurrence of any error in Citrix Receiver.", 
            "title": "onError"
        }, 
        {
            "location": "/session/#type_1", 
            "text": "object", 
            "title": "Type:"
        }, 
        {
            "location": "/session/#properties_3", 
            "text": "Name   Type   Description         id   String   String ID defined in  locale_file .js. For example, en.js would be for English, ko.js for Korean etc., ID remains the same for all locales supported.   message   String   Localized error message for the key. Customer can provide custom string in the language file to get meaningful error in the context of the deployment.", 
            "title": "Properties:"
        }, 
        {
            "location": "/session/#example_5", 
            "text": "Sample   event   object   generated   for   onError   event.               {    \n     id : session id , \n     type   :   onError , \n     data :{ \n             id : key_in_locale_file  \n             message   :   value_for_the_key_in_locale_file \n         }  }", 
            "title": "Example"
        }, 
        {
            "location": "/session/#onurlredirection-eventonurlredirection-name", 
            "text": "Raised when URL redirection is configured on server and when any URL is passed to the HTML5 engine to process. The message would contain the URL that is redirected to the client.", 
            "title": "onURLRedirection {#~event:onURLRedirection .name}"
        }, 
        {
            "location": "/session/#type_2", 
            "text": "object", 
            "title": "Type:"
        }, 
        {
            "location": "/session/#properties_4", 
            "text": "Name   Type   Description         url   String   The value of the url would contain the URL that is redirected to the client.", 
            "title": "Properties:"
        }, 
        {
            "location": "/session/#example_6", 
            "text": "Sample   event   object   generated   for   onURLRedirection   event.          {    \n     id : session id , \n     type   :   onURLRedirection , \n     data :{ \n         url   :   url_received_to_redirect \n     }  }", 
            "title": "Example"
        }, 
        {
            "location": "/citrix-receiver/", 
            "text": "Namespace: receiver\n\n\nreceiver\n\n\ncitrix.receiver\n\n\nMembers\n\n\n(readonly) \napiVersion\n \n\n\nProperties:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napiVersion\n\n\nString\n\n\nHTML5 receiver API version.\n\n\n\n\n\n\n\n\nMethods\n\n\n(static) \ncreateSession\n(id\nopt\n, connectionParams, onSessionCreated)\n\n\nCreates a new session and returns session instance through callback. Use session instance to start the session, register and handle events and to disconnect the session.\n\n\nParameters:\n\n\nName\nType\nAttributes\nDescription\nid\nstring\noptional\nID that is assigned when the session is created.\nconnectionParams\nconnectionParams\nConfiguration options to create the session.\nonSessionCreated\nonSessionCreated\nCallback containing the session object created.\nSignature sample below:\nfunction \nfunction_name\n(session_object){\u2026}\n\n\nThrows:\n\n\nUnable to create session object.\n\n\nType \n\n\nReceiverError\n\n\nExample\n\n\nFollowing code launches an app/desktop in an iframe. Setting preferences to hide the in-session toolbar.\n\n\ntry\n{\n\n    \ncitrix\n.\nreceiver\n.\nsetPath\n(\nhttp://html5client_hosted_url/\n);\n\n    \nvar\n \nid\n \n=\n \nsession1\n;\n \n//Optional parameter\n\n    \nvar\n \nconnectionParams\n \n=\n \n{\n\n            \nlaunchType\n \n:\n \nembed\n,\n\n            \ncontainer\n \n:\n \n{\n\n                \ntype\n \n:\n \niframe\n,\n\n                \nvalue\n \n:\n \nsessionIframe\n\n            \n},\n\n            \npreferences\n \n:\n \n{\n\n                \nui\n \n:\n \n{\n\n                    \ntoolbar\n \n:\n \n{\n\n                        \nmenubar\n \n:\n \nfalse\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n};\n\n    \nfunction\n \nsessionCreated\n(\nsessionObject\n){\n\n\n        \n//Handle session interactions like events, start, disconnect here.              \n\n        \n// Adding onConnection event handler\n\n        \nfunction\n \nconnectionHandler\n(\nevent\n){\n\n            \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n\n            \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n        \n        \n}\n               \n        \nsessionObject\n.\naddListener\n(\nonConnection\n,\nconnectionHandler\n);\n\n        \n// Adding onConnectionClosed event handler\n\n        \nfunction\n \nconnectionClosedHandler\n(\nevent\n){\n\n            \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n            \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n        \n        \n}\n\n        \nsessionObject\n.\naddListener\n(\nonConnectionClosed\n,\nconnectionClosedHandler\n);\n\n\n        \n// Adding onError event handler\n\n        \nfunction\n \nonErrorHandler\n(\nevent\n){\n\n            \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n            \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n        \n}\n\n        \nsessionObject\n.\naddListener\n(\nonError\n,\nonErrorHandler\n);\n\n\n        \n//Adding onURLRedirection event handler\n\n        \nfunction\n \nonURLRedirectionHandler\n(\nevent\n){\n\n            \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n            \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n        \n}\n\n        \nsessionObject\n.\naddListener\n(\nonURLRedirection\n,\nonURLRedirectionHandler\n);\n\n\n        \n//ICADATA has been constructed for example. Recommending to use StoreFront/WebInterface SDK to get ICA. \n\n        \n//Refer session.start() for more details.\n\n        \nvar\n \nicaData\n \n=\n \n{\n\n            \nDomain\n:\nabcd\n,\n\n            \nClearPassword\n:\nxxxxxxxxx\n,\n\n            \nInitialProgram\n:\n#Desktop\n,\n\n            \nTitle\n:\nDesktop\n,\n\n            \nAddress\n:\nxx.xx.xx.xx\n,\n\n            \nUsername\n:\nxyz\n                \n        \n};\n\n        \nvar\n \nlaunchData\n \n=\n \n{\ntype\n \n:\njson\n,\nvalue\n \n:\nicaData\n};\n   \n        \nsessionObject\n.\nstart\n(\nlaunchData\n);\n\n    \n}\n\n    \ncitrix\n.\nreceiver\n.\ncreateSession\n(\nid\n,\nconnectionParams\n,\nsessionCreated\n);\n\n\n}\ncatch\n(\nex\n){\n\n    \nconsole\n.\nlog\n(\nex\n);\n\n\n}\n\n\n\n\n\n\nMethods\n\n\n(static) \nsetPath\n(path)\n {#.setPath .name}\n\n\nSets the HTML5Engine Path. Must be set before creating a session.  \n\n\nParameters:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npath\n\n\nstring\n\n\nPath of HTML5Client folder.\n\n\n\n\n\n\n\n\nThrows:\n\n\nPath is empty.\n\n\n\n\n\nType \n\n\nReceiverError\n\n\n(static) \nviewLog\n()\n {#.viewLog .name}\n\n\nOpens the logging page in a new tab.HTML5Engine Path should be set\nbefore calling this API.\n\n\nThrows:\n\n\nHTML5 Engine Path is not set.\n\n\nType\n\n\nReceiverError", 
            "title": "Receiver"
        }, 
        {
            "location": "/citrix-receiver/#namespace-receiver", 
            "text": "", 
            "title": "Namespace: receiver"
        }, 
        {
            "location": "/citrix-receiver/#receiver", 
            "text": "citrix.receiver", 
            "title": "receiver"
        }, 
        {
            "location": "/citrix-receiver/#members", 
            "text": "(readonly)  apiVersion", 
            "title": "Members"
        }, 
        {
            "location": "/citrix-receiver/#properties", 
            "text": "Name  Type  Description      apiVersion  String  HTML5 receiver API version.", 
            "title": "Properties:"
        }, 
        {
            "location": "/citrix-receiver/#methods", 
            "text": "(static)  createSession (id opt , connectionParams, onSessionCreated)  Creates a new session and returns session instance through callback. Use session instance to start the session, register and handle events and to disconnect the session.", 
            "title": "Methods"
        }, 
        {
            "location": "/citrix-receiver/#parameters", 
            "text": "Name Type Attributes Description id string optional ID that is assigned when the session is created. connectionParams connectionParams Configuration options to create the session. onSessionCreated onSessionCreated Callback containing the session object created. Signature sample below: function  function_name (session_object){\u2026}", 
            "title": "Parameters:"
        }, 
        {
            "location": "/citrix-receiver/#throws", 
            "text": "Unable to create session object.  Type   ReceiverError", 
            "title": "Throws:"
        }, 
        {
            "location": "/citrix-receiver/#example", 
            "text": "Following code launches an app/desktop in an iframe. Setting preferences to hide the in-session toolbar.  try { \n     citrix . receiver . setPath ( http://html5client_hosted_url/ ); \n     var   id   =   session1 ;   //Optional parameter \n     var   connectionParams   =   { \n             launchType   :   embed , \n             container   :   { \n                 type   :   iframe , \n                 value   :   sessionIframe \n             }, \n             preferences   :   { \n                 ui   :   { \n                     toolbar   :   { \n                         menubar   :   false \n                     } \n                 } \n             } \n         }; \n     function   sessionCreated ( sessionObject ){ \n\n         //Handle session interactions like events, start, disconnect here.               \n         // Adding onConnection event handler \n         function   connectionHandler ( event ){ \n             console . log ( Event Received :    +   event . type ); \n             console . log ( event . data );         \n         }                \n         sessionObject . addListener ( onConnection , connectionHandler ); \n         // Adding onConnectionClosed event handler \n         function   connectionClosedHandler ( event ){ \n             console . log ( Event Received :    +   event . type );       \n             console . log ( event . data );         \n         } \n         sessionObject . addListener ( onConnectionClosed , connectionClosedHandler ); \n\n         // Adding onError event handler \n         function   onErrorHandler ( event ){ \n             console . log ( Event Received :    +   event . type );       \n             console . log ( event . data ); \n         } \n         sessionObject . addListener ( onError , onErrorHandler ); \n\n         //Adding onURLRedirection event handler \n         function   onURLRedirectionHandler ( event ){ \n             console . log ( Event Received :    +   event . type );       \n             console . log ( event . data ); \n         } \n         sessionObject . addListener ( onURLRedirection , onURLRedirectionHandler ); \n\n         //ICADATA has been constructed for example. Recommending to use StoreFront/WebInterface SDK to get ICA.  \n         //Refer session.start() for more details. \n         var   icaData   =   { \n             Domain : abcd , \n             ClearPassword : xxxxxxxxx , \n             InitialProgram : #Desktop , \n             Title : Desktop , \n             Address : xx.xx.xx.xx , \n             Username : xyz                 \n         }; \n         var   launchData   =   { type   : json , value   : icaData };    \n         sessionObject . start ( launchData ); \n     } \n     citrix . receiver . createSession ( id , connectionParams , sessionCreated );  } catch ( ex ){ \n     console . log ( ex );  }", 
            "title": "Example"
        }, 
        {
            "location": "/citrix-receiver/#methods_1", 
            "text": "(static)  setPath (path)  {#.setPath .name}  Sets the HTML5Engine Path. Must be set before creating a session.", 
            "title": "Methods"
        }, 
        {
            "location": "/citrix-receiver/#parameters_1", 
            "text": "Name  Type  Description      path  string  Path of HTML5Client folder.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/citrix-receiver/#throws_1", 
            "text": "Path is empty.  Type   ReceiverError  (static)  viewLog ()  {#.viewLog .name}  Opens the logging page in a new tab.HTML5Engine Path should be set\nbefore calling this API.", 
            "title": "Throws:"
        }, 
        {
            "location": "/citrix-receiver/#throws_2", 
            "text": "HTML5 Engine Path is not set.  Type  ReceiverError", 
            "title": "Throws:"
        }, 
        {
            "location": "/global/", 
            "text": "Global\n\n\nType Definitions\n\n\nconnectionParams\n\n\nConfiguration options to create the session.\n\n\nType:\n\n\n\n\n\n\nObject\n\n\n\n\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nconnectionParams\n \nObject\n \n \nProperties\n \n \n \nName\n \nType\n \nAttributes\n \nDescription\n \n \n \n \nlaunchType\n \nString\n \n \noptional\nTakes \"newtab\" or \"embed\" as value. Defaults to \"newtab\". \n\"newtab\" - launches the session in a new tab.\n\"embed\" - Opens the session in an Iframe.\n \ncontainer\n \nObject\n \n \nSpecifies the ID and the type of container for the session when launchType is embed. \nProperties\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nid\n \nString\n \nID of the iframe element to embed the session. Mandatory parameter when launchType is embed.\n \ntype\n \nString\n \nType of the element to embed the session. Should be set to \"iframe\".\n \n \nbounds\n \nObject\n \n \noptional\nSets a fixed width and height to the session. \nProperties\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nautoresize\n \nboolean\n \nShould be set to false to give fixed width and height to session. By default, this value is set to true in which case the session is resized to match the size of iframe element or the tab.\n \nwidth\n \nNumber\n \nWidth of the session specified in pixels. This value will be set only when autoresize is set to false.\n \nheight\n \nNumber\n \nHeight of the session specified in pixels. This value will be set only when autoresize is set to false.\n \n \ncloseOptions\n \nObject\n \n \noptional\nAction on disconnecting the session. Defaults to type=\"close\". \nProperties\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \ntype\n \nString\n \nSpecifies the type of action.\ntype=\u201dredirectUrl\u201d would redirect the tab to the URL specified in value.\ntype=\u201dclose\u201d would set the iframe src to \"about:blank\" when launchType is \"embed\" and closes the tab when launchType is \"newtab\".\n \nvalue\n \nString\n \nSpecifies the URL to be redirected. When type is set to \"close\",this value would be ignored.\n \nshowDisconnectAlert\n \nboolean\n \nA prompt would be shown to the user to stay/leave the current page when the session is about to disconnect due to the actions like close/reload of the tab. \nIf the value is set to true then the prompt is displayed otherwise prompt won't be shown. \nDefault value is true.\n \n \npreferredLang\n \nString\n \n \noptional\nSpecifies the preferred language code to be used inside the session. If the language code specified is either invalid or unsupported then it falls back to \"en\". \nSupported language codes : en, de, es, fr, ja, ko, ru, zh, zh-cn, zh-tw \nIf the value is unspecified then the browser's language code is used.\n \npreferences\n \nObject\n \n \noptional\nJSON to hide/show toolbar or individual toolbar items, suppressing the FTU, URLRedirection and error dialog.\nRefer to the example below.\n \n\n\nExample\n\n\nconnectionParams\n \nfull\n \nexample\n\n\n{\n\n    \nlaunchType\n \n:\n \nembed\n,\n\n    \ncontainer\n \n:\n \n{\n\n        \nid\n \n:\n \niframe id\n,\n\n        \ntype\n \n:\n \niframe\n\n    \n},\n\n    \nbounds\n \n:{\n\n        \nautoresize\n:\nfalse\n,\n\n        \nwidth\n:\n \n800\n,\n\n        \nheight\n:\n600\n\n    \n},\n  \n    \ncloseOptions\n \n:\n \n{\n\n        \ntype\n \n:\n \nredirecturl\n,\n\n        \nvalue\n:\n \nurl to redirect\n,\n\n        \nshowDisconnectAlert\n \n:\n \ntrue\n \n//false won\nt prompt when the session is about to disconnect due to the actions like close/reload of the tab.\n\n    \n},\n\n    \npreferredLang\n \n:\n \nja\n,\n \n//Setting to Japanese\n\n    \npreferences\n \n:\n \n{\n\n        \nui\n \n:\n \n{\n\n            \ntoolbar\n \n:\n \n{\n\n                \nmenubar\n:\ntrue\n,\n \n//false - hides the toolbar\n\n                \nclipboard\n:\ntrue\n,\n \n//false - hides the clipboard button from toolbar         \n\n                \nfileTransfer\n:\ntrue\n,\n \n//false - hides the file upload and download buttons from toolbar\n\n                \nabout\n:\ntrue\n,\n \n//false - hides the about button from toolbar\n\n                \nlock\n:\ntrue\n,\n \n//false - hides the ctrl+alt+del button from toolbar\n\n                \ndisconnect\n:\ntrue\n,\n \n//false - hides the disconnect button from toolbar\n\n                \nlogoff\n:\ntrue\n,\n \n// false - hides the logoff button from toolbar\n\n                \nfullscreen\n:\ntrue\n,\n \n//false - hides the fullscreen button from toolbar\n\n                \nkeyboard\n:\ntrue\n,\n \n//false - hides the keyboard button from toolbar, this button appears only in touch devices\n\n                \nmultitouch\n:\ntrue\n,\n \n//false - hides the multitouch button from toolbar, this button appears only in touch devices\n\n                \nswitchApp\n:\ntrue\n,\n \n//false - hides the switchApp button from toolbar, this button appears only for apps session\n\n                \npreferences\n:\ntrue\n,\n \n//false - hides the preferences button from toolbar\n\n                \ngestureGuide\n:\ntrue\n \n//false - hides the gestureGuide button from toolbar, this button appears only in touch devices\n\n            \n},\n\n            \nhide\n:{\n\n                \nurlredirection\n \n:\n \nfalse\n,\n \n//true - hides the urlredirection dialog shown by HTML5 Engine\n\n                \nerror\n \n:\n \nfalse\n,\n \n//true - hides the error dialog shown by HTML5 Engine\n\n                \nftu\n \n:\n \nfalse\n \n//true - hides the FTU(first time user dialog) shown by HTML5 Engine\n\n            \n},\n\n            \nappSwitcher\n:\n \n{\n\n                \nshowTaskbar\n:\n \ntrue\n,\n \n//false - disables the desktop appSwitcher/taskbar seen at the bottom \n\n                \nautoHide\n:\n \nfalse\n,\n \n//true - selects the Auto Hide checkbox present in the context menu of desktop appSwitcher/taskbar at the bottom  \n\n                \nshowIconsOnly\n:\n \nfalse\n \n//true - selects the Show Icons only checkbox present in the context menu of desktop appSwitcher/taskbar at the bottom  \n\n            \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\neventListener\n(event)\n\n\nListener to handle the events.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nevent\n \nObject\n \nObject as appropriate to the eventType registered.\n\n\n\nProperties:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nevent.id\n \nString\n \nId of the session object.\n \nevent.type\n \nString\n \nEvent Type triggered.\n \nevent.data\n \nObject\n \nData as appropriate to the event triggered.\nonConnection\nonConnectionClosed\nonURLRedirection\nonError\n\n\n\nonSessionCreated\n\n\nCallback having the session object created.\n\n\nParameters:\n\n\n \n \n \nName\n \nType\n \nDescription\n \n \n \n \nsessionObject\n \nSession\n \nSession object to interact with the session like register and handle events, start and disconnect.\n\n\n\nExample\n\n\nfunction\n \nsessionCreated\n(\nsessionObject\n){\n\n    \n//Handle session interactions like events, start, disconnect here.  \n\n    \n//ICADATA has been constructed for example. Recommending to use StoreFront/WebInterface SDK to get ICA. \n\n    \n//Refer session.start() for more details.\n\n    \nvar\n \nicaData\n \n=\n \n{\n\n        \nDomain\n:\nabcd\n,\n\n        \nClearPassword\n:\nxxxxxxxxx\n,\n\n        \nInitialProgram\n:\n#Desktop\n,\n\n        \nTitle\n:\nDesktop\n,\n\n        \nAddress\n:\nxx.xx.xx.xx\n,\n\n        \nUsername\n:\nxyz\n                \n    \n};\n\n    \nvar\n \nlaunchData\n \n=\n \n{\ntype\n \n:\njson\n,\nvalue\n \n:\nicaData\n};\n\n    \nsessionObject\n.\nstart\n(\nlaunchData\n);\n\n\n}", 
            "title": "Global"
        }, 
        {
            "location": "/global/#global", 
            "text": "", 
            "title": "Global"
        }, 
        {
            "location": "/global/#type-definitions", 
            "text": "", 
            "title": "Type Definitions"
        }, 
        {
            "location": "/global/#connectionparams", 
            "text": "Configuration options to create the session.", 
            "title": "connectionParams"
        }, 
        {
            "location": "/global/#type", 
            "text": "Object", 
            "title": "Type:"
        }, 
        {
            "location": "/global/#properties", 
            "text": "Name   Type   Description         connectionParams   Object", 
            "title": "Properties:"
        }, 
        {
            "location": "/global/#example", 
            "text": "connectionParams   full   example  { \n     launchType   :   embed , \n     container   :   { \n         id   :   iframe id , \n         type   :   iframe \n     }, \n     bounds   :{ \n         autoresize : false , \n         width :   800 , \n         height : 600 \n     },   \n     closeOptions   :   { \n         type   :   redirecturl , \n         value :   url to redirect , \n         showDisconnectAlert   :   true   //false won t prompt when the session is about to disconnect due to the actions like close/reload of the tab. \n     }, \n     preferredLang   :   ja ,   //Setting to Japanese \n     preferences   :   { \n         ui   :   { \n             toolbar   :   { \n                 menubar : true ,   //false - hides the toolbar \n                 clipboard : true ,   //false - hides the clipboard button from toolbar          \n                 fileTransfer : true ,   //false - hides the file upload and download buttons from toolbar \n                 about : true ,   //false - hides the about button from toolbar \n                 lock : true ,   //false - hides the ctrl+alt+del button from toolbar \n                 disconnect : true ,   //false - hides the disconnect button from toolbar \n                 logoff : true ,   // false - hides the logoff button from toolbar \n                 fullscreen : true ,   //false - hides the fullscreen button from toolbar \n                 keyboard : true ,   //false - hides the keyboard button from toolbar, this button appears only in touch devices \n                 multitouch : true ,   //false - hides the multitouch button from toolbar, this button appears only in touch devices \n                 switchApp : true ,   //false - hides the switchApp button from toolbar, this button appears only for apps session \n                 preferences : true ,   //false - hides the preferences button from toolbar \n                 gestureGuide : true   //false - hides the gestureGuide button from toolbar, this button appears only in touch devices \n             }, \n             hide :{ \n                 urlredirection   :   false ,   //true - hides the urlredirection dialog shown by HTML5 Engine \n                 error   :   false ,   //true - hides the error dialog shown by HTML5 Engine \n                 ftu   :   false   //true - hides the FTU(first time user dialog) shown by HTML5 Engine \n             }, \n             appSwitcher :   { \n                 showTaskbar :   true ,   //false - disables the desktop appSwitcher/taskbar seen at the bottom  \n                 autoHide :   false ,   //true - selects the Auto Hide checkbox present in the context menu of desktop appSwitcher/taskbar at the bottom   \n                 showIconsOnly :   false   //true - selects the Show Icons only checkbox present in the context menu of desktop appSwitcher/taskbar at the bottom   \n             } \n         } \n     }  }", 
            "title": "Example"
        }, 
        {
            "location": "/global/#eventlistenerevent", 
            "text": "Listener to handle the events.", 
            "title": "eventListener(event)"
        }, 
        {
            "location": "/global/#parameters", 
            "text": "Name   Type   Description         event   Object   Object as appropriate to the eventType registered.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/global/#properties_1", 
            "text": "Name   Type   Description         event.id   String   Id of the session object.   event.type   String   Event Type triggered.   event.data   Object   Data as appropriate to the event triggered. onConnection onConnectionClosed onURLRedirection onError", 
            "title": "Properties:"
        }, 
        {
            "location": "/global/#onsessioncreated", 
            "text": "Callback having the session object created.", 
            "title": "onSessionCreated"
        }, 
        {
            "location": "/global/#parameters_1", 
            "text": "Name   Type   Description         sessionObject   Session   Session object to interact with the session like register and handle events, start and disconnect.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/global/#example_1", 
            "text": "function   sessionCreated ( sessionObject ){ \n     //Handle session interactions like events, start, disconnect here.   \n     //ICADATA has been constructed for example. Recommending to use StoreFront/WebInterface SDK to get ICA.  \n     //Refer session.start() for more details. \n     var   icaData   =   { \n         Domain : abcd , \n         ClearPassword : xxxxxxxxx , \n         InitialProgram : #Desktop , \n         Title : Desktop , \n         Address : xx.xx.xx.xx , \n         Username : xyz                 \n     }; \n     var   launchData   =   { type   : json , value   : icaData }; \n     sessionObject . start ( launchData );  }", 
            "title": "Example"
        }, 
        {
            "location": "/sample/", 
            "text": "SDK Example\n\n\nRefer the end-to-end example in the download. This \nlink\n contains examples to integrate with StoreFront SDK and Receiver for HTML5 SDK.\n\n\nSteps to run the SDK sample page:\n\n\n\n\nCopy all 3 files from \nCitrixReceiverHTML5SDK_2.2.zip\n to Receiver for Web root folder\n\n\nCopy SDKExample.html from \nCitrixReceiverHTML5SDK_2.2_Example.zip\n to the Receiver for Web root folder\n\n\nOpen the StoreFront admin console, select the Authentication node and click \"Add/Remove Methods\". Enable \"HTTP Basic\"\n\n\nNavigate to the SDKExample.html in a Web browser", 
            "title": "SDK Sample"
        }, 
        {
            "location": "/sample/#sdk-example", 
            "text": "Refer the end-to-end example in the download. This  link  contains examples to integrate with StoreFront SDK and Receiver for HTML5 SDK.", 
            "title": "SDK Example"
        }, 
        {
            "location": "/sample/#steps-to-run-the-sdk-sample-page", 
            "text": "Copy all 3 files from  CitrixReceiverHTML5SDK_2.2.zip  to Receiver for Web root folder  Copy SDKExample.html from  CitrixReceiverHTML5SDK_2.2_Example.zip  to the Receiver for Web root folder  Open the StoreFront admin console, select the Authentication node and click \"Add/Remove Methods\". Enable \"HTTP Basic\"  Navigate to the SDKExample.html in a Web browser", 
            "title": "Steps to run the SDK sample page:"
        }
    ]
}