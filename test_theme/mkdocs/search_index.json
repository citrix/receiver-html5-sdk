{
    "docs": [
        {
            "location": "/", 
            "text": "Citrix.SDK.AppDNA Namespace\n\n\nContains classes for using the AppDNA analysis engine.\n\n\nClasses\n\n\nClass\nDescription\nAlgorithm\n\nRepresents an algorithm used by analysis, the results of which are available in reports.\nAlgorithmAction\n\nRepresents a recommended action to be taken when an algorithm is triggered.\nAlgorithmActionDetail\n\nProvides further information about \nAlgorithmAction\n.\nAlgorithmCustomization\n\nRepresents a user-defined customization of an \nAlgorithm\n.\nAlgorithmGroup\n\nRepresents a group of algorithms.\nAnalysis\n\nRepresents a requested analysis. Use this to monitor the state of the analysis and retrieve the resulting report. An instance of this class is returned from a call to Analyze method of \nReportConfiguration\n class.\nAppDNAException\n\nRepresents errors that occur while using the AppDNA SDK.\nApplication\n\nRepresents an application.\nApplicationAlgorithmResult\n\nContains the report data for a given application that has been analyzed against a given algorithm.\nApplicationAttachment\n\nFile attached to \nApplication\nApplicationAttribute\n\nRepresents the value of an ApplicationAttributeDefinition for a given Application.\nApplicationAttribute(T)\n\nRepresents the value of an ApplicationAttributeDefinition for a given Application in strongly typed manner.\nApplicationAttributeCollection\n\nA collection of \nApplicationAttribute\n objects.\nApplicationAttributeDefinition\n\nRepresents the definition of an attribute, which can be used to assign arbitrary values to an application.\nApplicationAttributeDefinitionService\n\nThis class is accessible from the \nApplicationAttributeDefinition\n property of an instance of \nServer\n class, and provides access to functionality related to application attribute definitions.\nApplicationForm\n\nRepresent Application form and particular value for application\nApplicationFormDefinition\n\nApplication form\nApplicationFormField\n\nAbstract application form field\nApplicationFormService\n\nRepresent Application forms services\nApplicationGroup\n\nRepresents a group of applications. Optionally, it may be the child of another \nApplicationGroup\n object, which allows a tree of \nApplicationGroup\n objects to be created.\nApplicationGroupCollection\n\nA collection of \nApplicationGroup\n objects.\nApplicationGroupHierarchyRoot\n\nRepresents the root of the \nApplicationGroup\n tree. Use this as a data binding object to display and monitor the \nApplicationGroup\n tree and stay up to date while the hierarchy is modified using the SDK. Retrieve it by calling \nGetApplicationGroupHierarchyRoot()\n.\nApplicationGrouping\n\nA base class to aggregate common functionality for \nApplicationGroup\n.\nApplicationGroupService\n\nThis class is accessible from the \nApplicationGroup\n property and provides access to functionality related to application groups.\nApplicationImportConfiguration\n\nHolds configuration details for an application import.\nApplicationPerformanceCounter\n\nExposes single counter from application profiling data as Name - Value pair.\nApplicationService\n\nThis class is accessible from \nApplication\n property and provides access to application-related functionality.\nAttributeStringList\n\nRepresents a list of strings that can be assigned to an ApplicationAttributeDefinition. ApplicationAttributes from that definition must use one of the strings from the \nStringList\n.\nAttributeStringListService\n\nThis class is accessible from \nAttributeStringList\n and provides access to functionality related to attribute string lists.\nBooleanAttribute\nDataEventArgs(T)\n\nHandle generic type of event parameters\nDataEventArgs(T1, T2)\n\nHandle generic type of event parameters\nDateTimeAttribute\nGeneralApplicationFormField(T)\n\nGeneral application form field\nIceValidationConfig\n\nHolds details for the optional application import step of performing an ICE (Internal Consistency Evaluators) validation against msi-files.\nImport\n\nRepresents an import as it progresses.\nImportOSSourceDetails\n\nThis class holds the details used to import an \nOSImage\n.\nImportSourceDetails\n\nHolds details about an application import. An instance of this class may also be used with an \nImport\n object as a key to retrieve details of the matching import.\nInstallCaptureConfiguration\n\nHolds configuration details for an Install Capture import.\nInstallCaptureSourceDetails\n\nHolds details about an installation that is to be captured using Install Capture.\nNumericAttribute\nOrderedApplicationAttributeDefinition\n\nStatic Attribute\nOrderedStaticAttribute\n\nStatic Attribute\nOSImage\n\nRepresents an OS Image\nOSImageService\n\nThis class is accessed from a \nServer\n object and provides access to \nOSImage\n-related functionality.\nOSImport\n\nRepresents an OS import as it progresses.\nOSPatch\n\nRepresents an OS Patch\nOSPatchFile\n\nRepresents an OS Patch File\nOSPatchService\n\nProvides functionality to Import Microsoft Patches into AppDNA\nPatchImportResult\nPerformanceCounter\n\nExposes single counter from profiling data as Name - Value pair.\nPerformanceService\n\nThis class is accessible from \nPerformance\n property and provides access to performance-related functionality.\nProcessingState\n\nRepresents the state of a processing action that is running asynchronously. Typically, this is a server-side processing task.\nProfileApplicationConfiguration\n\nHolds configuration details for an application Profiling.\nProfileApplicationSourceDetails\n\nHolds details about an installation that is to be used to install app before Profiling.\nProfileDataCollection\n\nHolds all profiler data for an application\nRaguAttribute\nReport\n\nRepresents the results of analyzing applications using a \nReportConfiguration\n.\nReportConfiguration\n\nRepresents a report configuration for one of the available AppDNA reporting modules. It provides access to which algorithms are available, which are disabled, the details of each algorithm, and any customizations or actions defined for those algorithms. A report configuration is used to trigger analysis (see \nAnalyze\n and its overloads), as well as retrieving \nReport\n objects that contain the results of analysis (see \nGetReport\n or one of its overloads).\nReportConfigurationService\n\nThis class is accessible from \nReportConfiguration\n property and provides access to functionality related to report configurations.\nReportedAlgorithm\n\nA class that represents the report data for a specific algorithm.\nReportedAlgorithmCollection\n\nA collection of \nReportedAlgorithm\n objects, indexable by \nAlgorithm\n object or string identifier.\nReportedApplication\n\nA class that holds the report data for a specific application.\nReportedApplicationCollection\n\n- A collection of \nReportedApplication\n objects, indexable by \nApplication\n object or numeric index.\nReportService\n\nThis class is accessible from \nReport\n property and provides access to report-related functionality.\nRequiredApplicationCollection\n\nA collection of \nApplicationAttribute\n objects.\nResultByAlgorithmCollection\n\nA collection of \nApplicationAlgorithmResult\n objects for a specific Application.\nResultByApplicationCollection\n\nA collection of \nApplicationAlgorithmResult\n objects, indexable by Application object or numeric index.\nServer\n\nRepresents an instance of AppDNA (i.e. a specific AppDNA database). Create by calling \nConnect(String, String, String)\n one of the overloads.\nServerTaskException\n\nRepresents errors that occur on the AppDNA server.\nSettingsService\n\nThis class is accessible from \nSettings\n property and provides access to AppDNA settings.\nSolution\n\nRepresents an solution instance.\nSolutionConfigurationException\n\nExposes solution configuration violations\nSolutionService\n\nThis class is accessible from \nSolution\n property and provides access to solution-related functionality.\nSolutionTemplate\n\nRepresents an solution template.\nSolutionTemplateService\n\nThis class is accessible from \nSolutionTemplate\n property and provides access to solution template-related functionality.\nStaticApplicationFormField\n\nStatic application form field\nStaticAttribute\n\nStatic Attribute\nStaticAttributeService\n\nThis class is accessible from \nSolution\n property and provides access to solution-related functionality.\nStringAttribute\nVirtualMachineConfiguration\n\nRepresents an Virtual Machine Configuration.\nVirtualMachineConfigurationService\n\nThis class is accessible from Server property and provides access to functionality related to a \nVirtualMachineConfiguration\n.\nWebApplicationImportConfiguration\n\nHolds configuration datails for a web application import\nWebCaptureSettings\n\nRepresents settings for capturing web applications via Directed Spider\nWebImportSourceDetails\n\nHolds details about a web application import. An instance of this class may also be used with an \nImport\n object as a key to retrieve details of the matching import.\n\n\nInterfaces\n\n\nInterface\nDescription\nIApplicationForm\n\nApplication form interface\nIImportDetails\n\nThis interface is implemented by various classes that represent import details. It is primarily abstraction.\nIOrderedApplicationAttributeDefinition\n\nInterface that represents general attributes and orders\nIOrderedStaticAttribute\n\nInterface that represents ordered static attribute\nIStaticAttribute\n\nStatic Attribute interface\n\n\nDelegates\n\n\nDelegate\nDescription\nAnalysisStartedEventHander\n\nThis delegate defines the \nAnalysisStarted\n event exposed by the \nImport\n class.\nApplicationImportStateChangedEventHandler\n\nThis delegate defines the \nApplicationImportStateChanged\n event exposed by the \nImport\n class.\nFileImportStateChangedEventHandler\n\nThis delegate defines the \nFileImportStateChanged\n event exposed by the \nImport\n class.\nOSImportStateChangedEventHandler\n\nThis delegate defines the \nImportStateChanged\n event exposed by the \nOSImport\n class.\n\n\nEnumerations\n\n\nEnumeration\nDescription\nApplicationDeleteOptions\n\nOptions that will control the checks and balances made when applications are deleted.\nApplicationFilter\n\nSpecifies which fields are to be used for filtering and ordering.\nApplicationGroupFilter\n\nSpecifies which fields are to be used for filtering and ordering.\nApplicationStateEnum\n\nSpecifies the type of the application state that was used on import.\nAttributeDefinitionDataType\n\nThe data type of an \nApplicationAttributeDefinition\n.\nAttributeDefinitionVisibilities\n\nA flag-based enumeration that defines where an attribute is to be displayed.\nCompatibility\n\nAn enumeration representing application compatibility level.\nOSImageFilter\n\nSpecifies which fields are to be used for filtering and ordering.\nRag\n\nAn enumeration to represent Red, Amber or Green values.\nRagu\n\nAn enumeration to represent Red, Amber, Green or Unknown values.\nReportExportFormat\n\nAn enumeration containing possible formats for exported reports.\nReportingConfigurationFilter\n\nSpecifies which fields are to be used for filtering and ordering.\nReportRag\n\nContains values that represent the state of an analyzed application.\nReportType\n\nAn enumeration containing values representing the different types of report that are available for export.\nRunningState\n\nThe enumeration holds values for all the possible states of a \nProcessingState\n.\nSourceCategory\n\nSpecifies the type of the application source that was used on import.\nStaticFieldType\n\nStatic fields type\nTrustLevel\n\nAn enumeration representing Trust Levels.\nWebApplicationImportMode\n\nSpecifies in which way web applications are", 
            "title": "AppDNA SDK Overview"
        }, 
        {
            "location": "/#citrixsdkappdna-namespace", 
            "text": "Contains classes for using the AppDNA analysis engine.", 
            "title": "Citrix.SDK.AppDNA Namespace"
        }, 
        {
            "location": "/#classes", 
            "text": "Class Description Algorithm \nRepresents an algorithm used by analysis, the results of which are available in reports. AlgorithmAction \nRepresents a recommended action to be taken when an algorithm is triggered. AlgorithmActionDetail \nProvides further information about  AlgorithmAction . AlgorithmCustomization \nRepresents a user-defined customization of an  Algorithm . AlgorithmGroup \nRepresents a group of algorithms. Analysis \nRepresents a requested analysis. Use this to monitor the state of the analysis and retrieve the resulting report. An instance of this class is returned from a call to Analyze method of  ReportConfiguration  class. AppDNAException \nRepresents errors that occur while using the AppDNA SDK. Application \nRepresents an application. ApplicationAlgorithmResult \nContains the report data for a given application that has been analyzed against a given algorithm. ApplicationAttachment \nFile attached to  Application ApplicationAttribute \nRepresents the value of an ApplicationAttributeDefinition for a given Application. ApplicationAttribute(T) \nRepresents the value of an ApplicationAttributeDefinition for a given Application in strongly typed manner. ApplicationAttributeCollection \nA collection of  ApplicationAttribute  objects. ApplicationAttributeDefinition \nRepresents the definition of an attribute, which can be used to assign arbitrary values to an application. ApplicationAttributeDefinitionService \nThis class is accessible from the  ApplicationAttributeDefinition  property of an instance of  Server  class, and provides access to functionality related to application attribute definitions. ApplicationForm \nRepresent Application form and particular value for application ApplicationFormDefinition \nApplication form ApplicationFormField \nAbstract application form field ApplicationFormService \nRepresent Application forms services ApplicationGroup \nRepresents a group of applications. Optionally, it may be the child of another  ApplicationGroup  object, which allows a tree of  ApplicationGroup  objects to be created. ApplicationGroupCollection \nA collection of  ApplicationGroup  objects. ApplicationGroupHierarchyRoot \nRepresents the root of the  ApplicationGroup  tree. Use this as a data binding object to display and monitor the  ApplicationGroup  tree and stay up to date while the hierarchy is modified using the SDK. Retrieve it by calling  GetApplicationGroupHierarchyRoot() . ApplicationGrouping \nA base class to aggregate common functionality for  ApplicationGroup . ApplicationGroupService \nThis class is accessible from the  ApplicationGroup  property and provides access to functionality related to application groups. ApplicationImportConfiguration \nHolds configuration details for an application import. ApplicationPerformanceCounter \nExposes single counter from application profiling data as Name - Value pair. ApplicationService \nThis class is accessible from  Application  property and provides access to application-related functionality. AttributeStringList \nRepresents a list of strings that can be assigned to an ApplicationAttributeDefinition. ApplicationAttributes from that definition must use one of the strings from the  StringList . AttributeStringListService \nThis class is accessible from  AttributeStringList  and provides access to functionality related to attribute string lists. BooleanAttribute DataEventArgs(T) \nHandle generic type of event parameters DataEventArgs(T1, T2) \nHandle generic type of event parameters DateTimeAttribute GeneralApplicationFormField(T) \nGeneral application form field IceValidationConfig \nHolds details for the optional application import step of performing an ICE (Internal Consistency Evaluators) validation against msi-files. Import \nRepresents an import as it progresses. ImportOSSourceDetails \nThis class holds the details used to import an  OSImage . ImportSourceDetails \nHolds details about an application import. An instance of this class may also be used with an  Import  object as a key to retrieve details of the matching import. InstallCaptureConfiguration \nHolds configuration details for an Install Capture import. InstallCaptureSourceDetails \nHolds details about an installation that is to be captured using Install Capture. NumericAttribute OrderedApplicationAttributeDefinition \nStatic Attribute OrderedStaticAttribute \nStatic Attribute OSImage \nRepresents an OS Image OSImageService \nThis class is accessed from a  Server  object and provides access to  OSImage -related functionality. OSImport \nRepresents an OS import as it progresses. OSPatch \nRepresents an OS Patch OSPatchFile \nRepresents an OS Patch File OSPatchService \nProvides functionality to Import Microsoft Patches into AppDNA PatchImportResult PerformanceCounter \nExposes single counter from profiling data as Name - Value pair. PerformanceService \nThis class is accessible from  Performance  property and provides access to performance-related functionality. ProcessingState \nRepresents the state of a processing action that is running asynchronously. Typically, this is a server-side processing task. ProfileApplicationConfiguration \nHolds configuration details for an application Profiling. ProfileApplicationSourceDetails \nHolds details about an installation that is to be used to install app before Profiling. ProfileDataCollection \nHolds all profiler data for an application RaguAttribute Report \nRepresents the results of analyzing applications using a  ReportConfiguration . ReportConfiguration \nRepresents a report configuration for one of the available AppDNA reporting modules. It provides access to which algorithms are available, which are disabled, the details of each algorithm, and any customizations or actions defined for those algorithms. A report configuration is used to trigger analysis (see  Analyze  and its overloads), as well as retrieving  Report  objects that contain the results of analysis (see  GetReport  or one of its overloads). ReportConfigurationService \nThis class is accessible from  ReportConfiguration  property and provides access to functionality related to report configurations. ReportedAlgorithm \nA class that represents the report data for a specific algorithm. ReportedAlgorithmCollection \nA collection of  ReportedAlgorithm  objects, indexable by  Algorithm  object or string identifier. ReportedApplication \nA class that holds the report data for a specific application. ReportedApplicationCollection \n- A collection of  ReportedApplication  objects, indexable by  Application  object or numeric index. ReportService \nThis class is accessible from  Report  property and provides access to report-related functionality. RequiredApplicationCollection \nA collection of  ApplicationAttribute  objects. ResultByAlgorithmCollection \nA collection of  ApplicationAlgorithmResult  objects for a specific Application. ResultByApplicationCollection \nA collection of  ApplicationAlgorithmResult  objects, indexable by Application object or numeric index. Server \nRepresents an instance of AppDNA (i.e. a specific AppDNA database). Create by calling  Connect(String, String, String)  one of the overloads. ServerTaskException \nRepresents errors that occur on the AppDNA server. SettingsService \nThis class is accessible from  Settings  property and provides access to AppDNA settings. Solution \nRepresents an solution instance. SolutionConfigurationException \nExposes solution configuration violations SolutionService \nThis class is accessible from  Solution  property and provides access to solution-related functionality. SolutionTemplate \nRepresents an solution template. SolutionTemplateService \nThis class is accessible from  SolutionTemplate  property and provides access to solution template-related functionality. StaticApplicationFormField \nStatic application form field StaticAttribute \nStatic Attribute StaticAttributeService \nThis class is accessible from  Solution  property and provides access to solution-related functionality. StringAttribute VirtualMachineConfiguration \nRepresents an Virtual Machine Configuration. VirtualMachineConfigurationService \nThis class is accessible from Server property and provides access to functionality related to a  VirtualMachineConfiguration . WebApplicationImportConfiguration \nHolds configuration datails for a web application import WebCaptureSettings \nRepresents settings for capturing web applications via Directed Spider WebImportSourceDetails \nHolds details about a web application import. An instance of this class may also be used with an  Import  object as a key to retrieve details of the matching import.", 
            "title": "Classes"
        }, 
        {
            "location": "/#interfaces", 
            "text": "Interface Description IApplicationForm \nApplication form interface IImportDetails \nThis interface is implemented by various classes that represent import details. It is primarily abstraction. IOrderedApplicationAttributeDefinition \nInterface that represents general attributes and orders IOrderedStaticAttribute \nInterface that represents ordered static attribute IStaticAttribute \nStatic Attribute interface", 
            "title": "Interfaces"
        }, 
        {
            "location": "/#delegates", 
            "text": "Delegate Description AnalysisStartedEventHander \nThis delegate defines the  AnalysisStarted  event exposed by the  Import  class. ApplicationImportStateChangedEventHandler \nThis delegate defines the  ApplicationImportStateChanged  event exposed by the  Import  class. FileImportStateChangedEventHandler \nThis delegate defines the  FileImportStateChanged  event exposed by the  Import  class. OSImportStateChangedEventHandler \nThis delegate defines the  ImportStateChanged  event exposed by the  OSImport  class.", 
            "title": "Delegates"
        }, 
        {
            "location": "/#enumerations", 
            "text": "Enumeration Description ApplicationDeleteOptions \nOptions that will control the checks and balances made when applications are deleted. ApplicationFilter \nSpecifies which fields are to be used for filtering and ordering. ApplicationGroupFilter \nSpecifies which fields are to be used for filtering and ordering. ApplicationStateEnum \nSpecifies the type of the application state that was used on import. AttributeDefinitionDataType \nThe data type of an  ApplicationAttributeDefinition . AttributeDefinitionVisibilities \nA flag-based enumeration that defines where an attribute is to be displayed. Compatibility \nAn enumeration representing application compatibility level. OSImageFilter \nSpecifies which fields are to be used for filtering and ordering. Rag \nAn enumeration to represent Red, Amber or Green values. Ragu \nAn enumeration to represent Red, Amber, Green or Unknown values. ReportExportFormat \nAn enumeration containing possible formats for exported reports. ReportingConfigurationFilter \nSpecifies which fields are to be used for filtering and ordering. ReportRag \nContains values that represent the state of an analyzed application. ReportType \nAn enumeration containing values representing the different types of report that are available for export. RunningState \nThe enumeration holds values for all the possible states of a  ProcessingState . SourceCategory \nSpecifies the type of the application source that was used on import. StaticFieldType \nStatic fields type TrustLevel \nAn enumeration representing Trust Levels. WebApplicationImportMode \nSpecifies in which way web applications are", 
            "title": "Enumerations"
        }, 
        {
            "location": "/html5/", 
            "text": "HDX SDK for HTML5\n\n\nIntroduction\n\n\nCitrix Receiver for HTML5 enhances support for HDX and SDK sessions by\nenabling you to customize your delivery model for Citrix hosted apps and\ndesktops through your website. This feature is particularly useful for\nbuilding a rich app experience in your Enterprise portals. It can be\nused to provide a rich app experience for users as a service when\nhosting Citrix Receiver for HTML5 on your web server while launching\nCitrix hosted apps and desktops from your website.\n\n\nGetting Started\n\n\n\n\nCopy CitrixHTML5SDK.js, HDXLauncher.js, HDXEngine.html files to the\n    same folder as the parent HTML page.\n\n\nInclude CitrixHTML5SDK.js in parent HTML page.\n\n\nSet the full path of HTML5 Client.\n\n\nSet the connection parameters for launching the session.\n\n\nAttach the events if required.\n\n\nStart the session by passing ICA.You can refer to \nStoreFront Web\n    APIs\n\n    to fetch ICA.\n\n\n\n\nClick \nhere\n to access full API documentation.", 
            "title": "HTML5"
        }, 
        {
            "location": "/html5/#hdx-sdk-for-html5", 
            "text": "", 
            "title": "HDX SDK for HTML5"
        }, 
        {
            "location": "/html5/#introduction", 
            "text": "Citrix Receiver for HTML5 enhances support for HDX and SDK sessions by\nenabling you to customize your delivery model for Citrix hosted apps and\ndesktops through your website. This feature is particularly useful for\nbuilding a rich app experience in your Enterprise portals. It can be\nused to provide a rich app experience for users as a service when\nhosting Citrix Receiver for HTML5 on your web server while launching\nCitrix hosted apps and desktops from your website.", 
            "title": "Introduction"
        }, 
        {
            "location": "/html5/#getting-started", 
            "text": "Copy CitrixHTML5SDK.js, HDXLauncher.js, HDXEngine.html files to the\n    same folder as the parent HTML page.  Include CitrixHTML5SDK.js in parent HTML page.  Set the full path of HTML5 Client.  Set the connection parameters for launching the session.  Attach the events if required.  Start the session by passing ICA.You can refer to  StoreFront Web\n    APIs \n    to fetch ICA.   Click  here  to access full API documentation.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/example/", 
            "text": "Class: Session {#class-session .page-title}\n\n\nSession\n\n\n\n\n#### \nnew Session\n()\n {#Session .name}\n\n\n\n### Members {#members .subsection-title}\n\n#### \ncontainer\n {#container .name}\n\n\n\nContains the type and value of the container where the session is\nlaunched.\n\n\n##### Properties: {#properties .subsection-title}\n\n+-------------------------+-------------------------+-------------------------+\n| Name                    | Type                    | Description             |\n+=========================+=========================+=========================+\n| `container`             | \nObje |                         |\n|                         | ct\n               |   Name      Type        |\n|                         |                         |                         |\n|                         |                         |        Description      |\n|                         |                         |   --------- ----------- |\n|                         |                         | ----------------------- |\n|                         |                         | ------ ---------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ------------            |\n|                         |                         |   `type`    \nString\n   Type of the cont |\n|                         |                         | ainer. Will be set to \" |\n|                         |                         | iframe\" or \"window\" whe |\n|                         |                         | n launchType is set to  |\n|                         |                         | \"embed\" or \"newtab\" res |\n|                         |                         | pectively.              |\n|                         |                         |   `value`   \nObject\n   Contains the ifr |\n|                         |                         | ame DOM object or refer |\n|                         |                         | ence to the window wher |\n|                         |                         | e the session is launch |\n|                         |                         | ed based on the launchT |\n|                         |                         | ype.                    |\n+-------------------------+-------------------------+-------------------------+\n\n#### \n(readonly) \nid\n {#id .name}\n\n##### Properties: {#properties-2 .subsection-title}\n\n  Name   Type                                     Description\n  ------ ---------------------------------------- -------------------\n  `id`   \nString\n   ID of the object.\n\n### Methods {#methods .subsection-title}\n\n#### \n(inner) \naddListener\n(eventType, eventListener)\n {#~addListener .name}\n\n\n\n\nRegisters the eventListener on the eventType.\n\n\n\n\n\nParameters:\n\n\n\n\nName              Type                                                                         Description\n\n\n\n\neventType\n       \nString\n                                       Type of the event for which the listener needs to be attached.\\\n                                                                                                 \\\n                                                                                                 Supported event types :\\\n                                                                                                 \nonConnection\n\\\n                                                                                                 \nonConnectionClosed\n\\\n                                                                                                 \nonURLRedirection\n\\\n                                                                                                 \nonError\n\\\n\n\neventListener\n   \neventListener\n   Listener to handle the event.\n\n\n\n\nExample\n\n\n// Adding onConnection event handler\n\n\nfunction\n \nconnectionHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n\n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n        \n\n}\n               \n\nsessionObject\n.\naddListener\n(\nonConnection\n,\nconnectionHandler\n);\n\n\n\n// Adding onConnectionClosed event handler\n\n\nfunction\n \nconnectionClosedHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n        \n\n}\n\n\nsessionObject\n.\naddListener\n(\nonConnectionClosed\n,\nconnectionClosedHandler\n);\n\n\n\n// Adding onError event handler\n\n\nfunction\n \nonErrorHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n\n}\n\n\nsessionObject\n.\naddListener\n(\nonError\n,\nonErrorHandler\n);\n\n\n\n//Adding onURLRedirection event handler\n\n\nfunction\n \nonURLRedirectionHandler\n(\nevent\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n\n}\n\n\nsessionObject\n.\naddListener\n(\nonURLRedirection\n,\nonURLRedirectionHandler\n);\n\n\n\n\n\n\n(inner) \nchangeResolution\n(bounds)\n {#~changeResolution .name}\n\n\n\n\nChanges the resolution of the session.\n\n\n\n\n\nParameters:\n\n\nName       Type                                     Description\n\n\n\n\nbounds\n   \nObject\n   Contain session resolution settings.\n\n\nProperties: {#properties-3 .subsection-title}\n\n\nName                  Type                                      Description\n\n\n\n\nbounds.autoresize\n   \nboolean\n   Should be set to false to give fixed width and height to session. If this value is set to true then the session is resized to match the size of iframe element or the tab.\n  \nbounds.width\n        \nNumber\n    Width of the session specified in pixels. This value will be set only when autoresize is set to false.\n  \nbounds.height\n       \nNumber\n    Height of the session specified in pixels. This value will be set only when autoresize is set to false.\n\n\nExamples\n\n\nExample 1 : To change resolution to fixed width and height  \nvar bounds = {\n    \nautoresize\n:false,\n    \nwidth\n: \n800\n,\n    \nheight\n:\n600\n\n}\nsessionObject.changeResolution(bounds);\n\n\n\n\n\nExample 2 : To change the session resolution to match the iframe element or tab size   \nvar bounds = {\n    \nautoresize\n: true\n}\nsessionObject.changeResolution(bounds);\n\n\n\n\n\n(inner) \ndisconnect\n()\n {#~disconnect .name}\n\n\n\n\nDisconnects the session.\n\n\n\n\n\n(inner) \nremoveListener\n(eventType, eventListener)\n {#~removeListener .name}\n\n\n\n\nRemoves the eventListener on the eventType.\n\n\n\n\n\nParameters:\n\n\n\n\nName              Type                                                                         Description\n\n\n\n\neventType\n       \nString\n                                       Type of the event for which the listener needs to be removed.\\\n                                                                                                 \\\n                                                                                                 Supported event types :\\\n                                                                                                 \nonConnection\n\\\n                                                                                                 \nonConnectionClosed\n\\\n                                                                                                 \nonURLRedirection\n\\\n                                                                                                 \nonError\n\\\n\n\neventListener\n   \neventListener\n   Listener to handle the event.\n\n\n\n\nExample\n\n\n//Removing the event handler for onConnection event\n\n\nfunction\n \nconnectionHandler\n(\neventObj\n){\n\n    \nconsole\n.\nlog\n(\nEvent Received : \n \n+\n \nevent\n.\ntype\n);\n      \n    \nconsole\n.\nlog\n(\nevent\n.\ndata\n);\n\n\n}\n\n\nsessionObject\n.\nremoveListener\n(\nonConnection\n,\nconnectionHandler\n);\n\n\n\n\n\n\n(inner) \nsendSpecialKeys\n(keys)\n {#~sendSpecialKeys .name}\n\n\n\n\nSends a key combination to the session. In this version only\n\"ctrl+alt+del\" is supported.\n\n\n\n\n\nParameters:\n\n\nName     Type                                     Description\n\n\n\n\nkeys\n   \nString\n   Key combination string.\n\n\nExample\n\n\nvar keys = \nctrl+alt+del\n; //Only this key combination is supported in this version.\nsessionObject.sendSpecialKeys(keys);\n\n\n\n\n\n(inner) \nstart\n(launchData)\n {#~start .name}\n\n\n\n\nStarts the session.\n\n\n\n\n\nParameters:\n\n\nName           Type                                     Description\n\n\n\n\nlaunchData\n   \nObject\n   Contains the type and value of ICA.\n\n\nProperties: {#properties-4 .subsection-title}\n\n\nName                 Type                                     Description\n\n\n\n\nlaunchData.type\n    \nString\n   Specifies the data type of ICA data. Allowed values are \"json\" or \"ini\".\n  \nlaunchData.value\n   \nString\n   ICA data to start the session. It should be a JSON object when type is \"json\" or a string read from a .ini file when type is \"ini\".\n\n\nExamples\n\n\nExample 1 : When ICA data is in JSON format                                \nvar icaObj = {\n    \nClientName\n:\nHTML5-Receiver\n,\n    \nDomain\n:\ndomain_name\n,\n    \nClearPassword\n:\npassword\n,\n    \nInitialProgram\n:\ninitial program\n,\n    \nTitle\n:\ntitle\n,\n    \nAddress\n:\nip address\n,\n    \nUsername\n:\nuser name\n,\n    \nwsPort\n:\nport val\n\n}\nvar launchData = {\ntype\n : \njson\n,value : icaObj};\nsessionObject.start(launchData);\n\n\n\n\n\nExample 2 : When ICA data is in INI format\nvar launchData = {\ntype\n :\nini\n,value :\nica data in ini format\n};\nsessionObject.start(launchData);\n\n\n\n\n\nEvents {#events .subsection-title}\n\n\nonConnection {#~event:onConnection .name}\n\n\n\n\nTo receive various states during the connection from client to server.\n\n\n\n\n\nType:\n\n\n\n\nobject\n\n\n\n\nProperties: {#properties-5 .subsection-title}\n\n\n\n\nName      Type                                     Description\n\n\n\n\nstate\n   \nString\n   Different connection states below :\\\n                                                     \"connecting\" : Raised when connection starts before displaying connection dialog.\\\n                                                     \"connected\" : Raised when connection is complete and when server and client starts exchanging data.\\\n                                                     \"sessionReady\" : Raised when session is fully initialized, launched and ready for user interaction.\\\n\n\n\n\nExample\n\n\nSample event object generated for onConnection event.    \n\n{   \n    \nid\n:\nsession id\n,\n    \ntype\n : \nonConnection\n,\n    \ndata\n:{\n        \nstate\n : \nconnecting\n // Event is triggered 3 times with different states mentioned above.\n    }\n}\n\n\n\n\n\nonConnectionClosed {#~event:onConnectionClosed .name}\n\n\n\n\nRaised when the connection with the server is closed.\n\n\n\n\n\nExample\n\n\nSample event object generated for onConnectionClosed event.              \n\n{   \n    \nid\n:\nsession id\n,\n    \ntype\n : \nonConnectionClosed\n,\n}\n\n\n\n\n\nonError {#~event:onError .name}\n\n\n\n\nRaised on occurrence of any error in Citrix Receiver.\n\n\n\n\n\nType:\n\n\n\n\nobject\n\n\n\n\nProperties: {#properties-6 .subsection-title}\n\n\nName        Type                                     Description\n\n\n\n\nid\n        \nString\n   String ID defined in \nlocale_file\n.js. For example, en.js would be for English, ko.js for Korean etc., ID remains the same for all locales supported.\n  \nmessage\n   \nString\n   Localized error message for the key. Customer can provide custom string in the language file to get meaningful error in the context of the deployment.\n\n\nExample\n\n\nSample event object generated for onError event.             \n\n{   \n    \nid\n:\nsession id\n,\n    \ntype\n : \nonError\n,\n    \ndata\n:{\n            \nid\n:\nkey_in_locale_file\n \n            \nmessage\n : \nvalue_for_the_key_in_locale_file\n\n        }\n}                           \n\n\n\n\n\nonURLRedirection {#~event:onURLRedirection .name}\n\n\n\n\nRaised when URL redirection is configured on server and when any URL is\npassed to the HTML5 engine to process. The message would contain the URL\nthat is redirected to the client.\n\n\n\n\n\nType:\n\n\n\n\nobject\n\n\n\n\nProperties: {#properties-7 .subsection-title}\n\n\nName    Type                                     Description\n\n\n\n\nurl\n   \nString\n   The value of the url would contain the URL that is redirected to the client.\n\n\nExample\n\n\nSample event object generated for onURLRedirection event.        \n\n{   \n    \nid\n:\nsession id\n,\n    \ntype\n : \nonURLRedirection\n,\n    \ndata\n:{\n        \nurl\n : \nurl_received_to_redirect\n\n    }\n}               \n\n\n\n\n\n\n\n\n\n\n\nHome\n\n\nClasses\n\n\n\n\nReceiverError\n\n\nSession\n\n\n\n\nEvents\n\n\n\n\nonConnection\n\n\nonConnectionClosed\n\n\nonError\n\n\nonURLRedirection\n\n\n\n\nNamespaces\n\n\n\n\nreceiver\n\n\n\n\nGlobal\n\n\n\\", 
            "title": "Sample"
        }, 
        {
            "location": "/example/#class-session-class-session-page-title", 
            "text": "", 
            "title": "Class: Session {#class-session .page-title}"
        }, 
        {
            "location": "/example/#session", 
            "text": "####  new Session ()  {#Session .name}\n\n\n\n### Members {#members .subsection-title}\n\n####  container  {#container .name}\n\n\n\nContains the type and value of the container where the session is\nlaunched.\n\n\n##### Properties: {#properties .subsection-title}\n\n+-------------------------+-------------------------+-------------------------+\n| Name                    | Type                    | Description             |\n+=========================+=========================+=========================+\n| `container`             |  Obje |                         |\n|                         | ct                |   Name      Type        |\n|                         |                         |                         |\n|                         |                         |        Description      |\n|                         |                         |   --------- ----------- |\n|                         |                         | ----------------------- |\n|                         |                         | ------ ---------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ----------------------- |\n|                         |                         | ------------            |\n|                         |                         |   `type`     String    Type of the cont |\n|                         |                         | ainer. Will be set to \" |\n|                         |                         | iframe\" or \"window\" whe |\n|                         |                         | n launchType is set to  |\n|                         |                         | \"embed\" or \"newtab\" res |\n|                         |                         | pectively.              |\n|                         |                         |   `value`    Object    Contains the ifr |\n|                         |                         | ame DOM object or refer |\n|                         |                         | ence to the window wher |\n|                         |                         | e the session is launch |\n|                         |                         | ed based on the launchT |\n|                         |                         | ype.                    |\n+-------------------------+-------------------------+-------------------------+\n\n####  (readonly)  id  {#id .name}\n\n##### Properties: {#properties-2 .subsection-title}\n\n  Name   Type                                     Description\n  ------ ---------------------------------------- -------------------\n  `id`    String    ID of the object.\n\n### Methods {#methods .subsection-title}\n\n####  (inner)  addListener (eventType, eventListener)  {#~addListener .name} \n\nRegisters the eventListener on the eventType.", 
            "title": "Session"
        }, 
        {
            "location": "/example/#parameters", 
            "text": "Name              Type                                                                         Description   eventType         String                                        Type of the event for which the listener needs to be attached.\\\n                                                                                                 \\\n                                                                                                 Supported event types :\\\n                                                                                                  onConnection \\\n                                                                                                  onConnectionClosed \\\n                                                                                                  onURLRedirection \\\n                                                                                                  onError \\  eventListener     eventListener    Listener to handle the event.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/example/#example", 
            "text": "// Adding onConnection event handler  function   connectionHandler ( event ){ \n     console . log ( Event Received :    +   event . type ); \n     console . log ( event . data );          }                 sessionObject . addListener ( onConnection , connectionHandler );  // Adding onConnectionClosed event handler  function   connectionClosedHandler ( event ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );          }  sessionObject . addListener ( onConnectionClosed , connectionClosedHandler );  // Adding onError event handler  function   onErrorHandler ( event ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );  }  sessionObject . addListener ( onError , onErrorHandler );  //Adding onURLRedirection event handler  function   onURLRedirectionHandler ( event ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );  }  sessionObject . addListener ( onURLRedirection , onURLRedirectionHandler );", 
            "title": "Example"
        }, 
        {
            "location": "/example/#inner-changeresolutionbounds-changeresolution-name", 
            "text": "Changes the resolution of the session.", 
            "title": "(inner) changeResolution(bounds) {#~changeResolution .name}"
        }, 
        {
            "location": "/example/#parameters_1", 
            "text": "Name       Type                                     Description   bounds     Object    Contain session resolution settings.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/example/#properties-properties-3-subsection-title", 
            "text": "Name                  Type                                      Description   bounds.autoresize     boolean    Should be set to false to give fixed width and height to session. If this value is set to true then the session is resized to match the size of iframe element or the tab.\n   bounds.width          Number     Width of the session specified in pixels. This value will be set only when autoresize is set to false.\n   bounds.height         Number     Height of the session specified in pixels. This value will be set only when autoresize is set to false.", 
            "title": "Properties: {#properties-3 .subsection-title}"
        }, 
        {
            "location": "/example/#examples", 
            "text": "Example 1 : To change resolution to fixed width and height  \nvar bounds = {\n     autoresize :false,\n     width :  800 ,\n     height : 600 \n}\nsessionObject.changeResolution(bounds);  Example 2 : To change the session resolution to match the iframe element or tab size   \nvar bounds = {\n     autoresize : true\n}\nsessionObject.changeResolution(bounds);", 
            "title": "Examples"
        }, 
        {
            "location": "/example/#inner-disconnect-disconnect-name", 
            "text": "Disconnects the session.", 
            "title": "(inner) disconnect() {#~disconnect .name}"
        }, 
        {
            "location": "/example/#inner-removelistenereventtype-eventlistener-removelistener-name", 
            "text": "Removes the eventListener on the eventType.", 
            "title": "(inner) removeListener(eventType, eventListener) {#~removeListener .name}"
        }, 
        {
            "location": "/example/#parameters_2", 
            "text": "Name              Type                                                                         Description   eventType         String                                        Type of the event for which the listener needs to be removed.\\\n                                                                                                 \\\n                                                                                                 Supported event types :\\\n                                                                                                  onConnection \\\n                                                                                                  onConnectionClosed \\\n                                                                                                  onURLRedirection \\\n                                                                                                  onError \\  eventListener     eventListener    Listener to handle the event.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/example/#example_1", 
            "text": "//Removing the event handler for onConnection event  function   connectionHandler ( eventObj ){ \n     console . log ( Event Received :    +   event . type );       \n     console . log ( event . data );  }  sessionObject . removeListener ( onConnection , connectionHandler );", 
            "title": "Example"
        }, 
        {
            "location": "/example/#inner-sendspecialkeyskeys-sendspecialkeys-name", 
            "text": "Sends a key combination to the session. In this version only\n\"ctrl+alt+del\" is supported.", 
            "title": "(inner) sendSpecialKeys(keys) {#~sendSpecialKeys .name}"
        }, 
        {
            "location": "/example/#parameters_3", 
            "text": "Name     Type                                     Description   keys     String    Key combination string.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/example/#example_2", 
            "text": "var keys =  ctrl+alt+del ; //Only this key combination is supported in this version.\nsessionObject.sendSpecialKeys(keys);", 
            "title": "Example"
        }, 
        {
            "location": "/example/#inner-startlaunchdata-start-name", 
            "text": "Starts the session.", 
            "title": "(inner) start(launchData) {#~start .name}"
        }, 
        {
            "location": "/example/#parameters_4", 
            "text": "Name           Type                                     Description   launchData     Object    Contains the type and value of ICA.", 
            "title": "Parameters:"
        }, 
        {
            "location": "/example/#properties-properties-4-subsection-title", 
            "text": "Name                 Type                                     Description   launchData.type      String    Specifies the data type of ICA data. Allowed values are \"json\" or \"ini\".\n   launchData.value     String    ICA data to start the session. It should be a JSON object when type is \"json\" or a string read from a .ini file when type is \"ini\".", 
            "title": "Properties: {#properties-4 .subsection-title}"
        }, 
        {
            "location": "/example/#examples_1", 
            "text": "Example 1 : When ICA data is in JSON format                                \nvar icaObj = {\n     ClientName : HTML5-Receiver ,\n     Domain : domain_name ,\n     ClearPassword : password ,\n     InitialProgram : initial program ,\n     Title : title ,\n     Address : ip address ,\n     Username : user name ,\n     wsPort : port val \n}\nvar launchData = { type  :  json ,value : icaObj};\nsessionObject.start(launchData);  Example 2 : When ICA data is in INI format\nvar launchData = { type  : ini ,value : ica data in ini format };\nsessionObject.start(launchData);", 
            "title": "Examples"
        }, 
        {
            "location": "/example/#events-events-subsection-title", 
            "text": "", 
            "title": "Events {#events .subsection-title}"
        }, 
        {
            "location": "/example/#onconnection-eventonconnection-name", 
            "text": "To receive various states during the connection from client to server.", 
            "title": "onConnection {#~event:onConnection .name}"
        }, 
        {
            "location": "/example/#type", 
            "text": "object", 
            "title": "Type:"
        }, 
        {
            "location": "/example/#properties-properties-5-subsection-title", 
            "text": "Name      Type                                     Description   state     String    Different connection states below :\\\n                                                     \"connecting\" : Raised when connection starts before displaying connection dialog.\\\n                                                     \"connected\" : Raised when connection is complete and when server and client starts exchanging data.\\\n                                                     \"sessionReady\" : Raised when session is fully initialized, launched and ready for user interaction.\\", 
            "title": "Properties: {#properties-5 .subsection-title}"
        }, 
        {
            "location": "/example/#example_3", 
            "text": "Sample event object generated for onConnection event.    \n\n{   \n     id : session id ,\n     type  :  onConnection ,\n     data :{\n         state  :  connecting  // Event is triggered 3 times with different states mentioned above.\n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/example/#onconnectionclosed-eventonconnectionclosed-name", 
            "text": "Raised when the connection with the server is closed.", 
            "title": "onConnectionClosed {#~event:onConnectionClosed .name}"
        }, 
        {
            "location": "/example/#example_4", 
            "text": "Sample event object generated for onConnectionClosed event.              \n\n{   \n     id : session id ,\n     type  :  onConnectionClosed ,\n}", 
            "title": "Example"
        }, 
        {
            "location": "/example/#onerror-eventonerror-name", 
            "text": "Raised on occurrence of any error in Citrix Receiver.", 
            "title": "onError {#~event:onError .name}"
        }, 
        {
            "location": "/example/#type_1", 
            "text": "object", 
            "title": "Type:"
        }, 
        {
            "location": "/example/#properties-properties-6-subsection-title", 
            "text": "Name        Type                                     Description   id          String    String ID defined in  locale_file .js. For example, en.js would be for English, ko.js for Korean etc., ID remains the same for all locales supported.\n   message     String    Localized error message for the key. Customer can provide custom string in the language file to get meaningful error in the context of the deployment.", 
            "title": "Properties: {#properties-6 .subsection-title}"
        }, 
        {
            "location": "/example/#example_5", 
            "text": "Sample event object generated for onError event.             \n\n{   \n     id : session id ,\n     type  :  onError ,\n     data :{\n             id : key_in_locale_file  \n             message  :  value_for_the_key_in_locale_file \n        }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/example/#onurlredirection-eventonurlredirection-name", 
            "text": "Raised when URL redirection is configured on server and when any URL is\npassed to the HTML5 engine to process. The message would contain the URL\nthat is redirected to the client.", 
            "title": "onURLRedirection {#~event:onURLRedirection .name}"
        }, 
        {
            "location": "/example/#type_2", 
            "text": "object", 
            "title": "Type:"
        }, 
        {
            "location": "/example/#properties-properties-7-subsection-title", 
            "text": "Name    Type                                     Description   url     String    The value of the url would contain the URL that is redirected to the client.", 
            "title": "Properties: {#properties-7 .subsection-title}"
        }, 
        {
            "location": "/example/#example_6", 
            "text": "Sample event object generated for onURLRedirection event.        \n\n{   \n     id : session id ,\n     type  :  onURLRedirection ,\n     data :{\n         url  :  url_received_to_redirect \n    }\n}", 
            "title": "Example"
        }, 
        {
            "location": "/example/#home", 
            "text": "", 
            "title": "Home"
        }, 
        {
            "location": "/example/#classes", 
            "text": "ReceiverError  Session", 
            "title": "Classes"
        }, 
        {
            "location": "/example/#events", 
            "text": "onConnection  onConnectionClosed  onError  onURLRedirection", 
            "title": "Events"
        }, 
        {
            "location": "/example/#namespaces", 
            "text": "receiver", 
            "title": "Namespaces"
        }, 
        {
            "location": "/example/#global", 
            "text": "\\", 
            "title": "Global"
        }
    ]
}